# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from f110_msgs/OppWpnt.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class OppWpnt(genpy.Message):
  _md5sum = "81351e4053edb61a279791df3b5554d5"
  _type = "f110_msgs/OppWpnt"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 id

# frenet coordinates
float64 s_m
float64 d_m

# map coordinates
float64 x_m
float64 y_m

# track information
float64 proj_vs_mps
float64 vd_mps

#variance  
float64 d_var
float64 vs_var

"""
  __slots__ = ['id','s_m','d_m','x_m','y_m','proj_vs_mps','vd_mps','d_var','vs_var']
  _slot_types = ['int32','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,s_m,d_m,x_m,y_m,proj_vs_mps,vd_mps,d_var,vs_var

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OppWpnt, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.s_m is None:
        self.s_m = 0.
      if self.d_m is None:
        self.d_m = 0.
      if self.x_m is None:
        self.x_m = 0.
      if self.y_m is None:
        self.y_m = 0.
      if self.proj_vs_mps is None:
        self.proj_vs_mps = 0.
      if self.vd_mps is None:
        self.vd_mps = 0.
      if self.d_var is None:
        self.d_var = 0.
      if self.vs_var is None:
        self.vs_var = 0.
    else:
      self.id = 0
      self.s_m = 0.
      self.d_m = 0.
      self.x_m = 0.
      self.y_m = 0.
      self.proj_vs_mps = 0.
      self.vd_mps = 0.
      self.d_var = 0.
      self.vs_var = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i8d().pack(_x.id, _x.s_m, _x.d_m, _x.x_m, _x.y_m, _x.proj_vs_mps, _x.vd_mps, _x.d_var, _x.vs_var))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 68
      (_x.id, _x.s_m, _x.d_m, _x.x_m, _x.y_m, _x.proj_vs_mps, _x.vd_mps, _x.d_var, _x.vs_var,) = _get_struct_i8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i8d().pack(_x.id, _x.s_m, _x.d_m, _x.x_m, _x.y_m, _x.proj_vs_mps, _x.vd_mps, _x.d_var, _x.vs_var))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 68
      (_x.id, _x.s_m, _x.d_m, _x.x_m, _x.y_m, _x.proj_vs_mps, _x.vd_mps, _x.d_var, _x.vs_var,) = _get_struct_i8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i8d = None
def _get_struct_i8d():
    global _struct_i8d
    if _struct_i8d is None:
        _struct_i8d = struct.Struct("<i8d")
    return _struct_i8d
