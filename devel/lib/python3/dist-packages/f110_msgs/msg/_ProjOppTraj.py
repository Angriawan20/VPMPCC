# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from f110_msgs/ProjOppTraj.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import f110_msgs.msg

class ProjOppTraj(genpy.Message):
  _md5sum = "499738ff330d861f27f97c2965929bae"
  _type = "f110_msgs/ProjOppTraj"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 lapcount
float64 nrofpoints
bool opp_is_on_trajectory
ProjOppPoint[] detections
================================================================================
MSG: f110_msgs/ProjOppPoint
#Velocities are projected onto ego race line

float64 s
float64 d                       
float64 vs
float64 vd
bool is_static
bool is_visible
float64 time
float64 s_var
float64 d_var
float64 vs_var
float64 vd_var"""
  __slots__ = ['lapcount','nrofpoints','opp_is_on_trajectory','detections']
  _slot_types = ['float64','float64','bool','f110_msgs/ProjOppPoint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lapcount,nrofpoints,opp_is_on_trajectory,detections

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ProjOppTraj, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.lapcount is None:
        self.lapcount = 0.
      if self.nrofpoints is None:
        self.nrofpoints = 0.
      if self.opp_is_on_trajectory is None:
        self.opp_is_on_trajectory = False
      if self.detections is None:
        self.detections = []
    else:
      self.lapcount = 0.
      self.nrofpoints = 0.
      self.opp_is_on_trajectory = False
      self.detections = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2dB().pack(_x.lapcount, _x.nrofpoints, _x.opp_is_on_trajectory))
      length = len(self.detections)
      buff.write(_struct_I.pack(length))
      for val1 in self.detections:
        _x = val1
        buff.write(_get_struct_4d2B5d().pack(_x.s, _x.d, _x.vs, _x.vd, _x.is_static, _x.is_visible, _x.time, _x.s_var, _x.d_var, _x.vs_var, _x.vd_var))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.detections is None:
        self.detections = None
      end = 0
      _x = self
      start = end
      end += 17
      (_x.lapcount, _x.nrofpoints, _x.opp_is_on_trajectory,) = _get_struct_2dB().unpack(str[start:end])
      self.opp_is_on_trajectory = bool(self.opp_is_on_trajectory)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.detections = []
      for i in range(0, length):
        val1 = f110_msgs.msg.ProjOppPoint()
        _x = val1
        start = end
        end += 74
        (_x.s, _x.d, _x.vs, _x.vd, _x.is_static, _x.is_visible, _x.time, _x.s_var, _x.d_var, _x.vs_var, _x.vd_var,) = _get_struct_4d2B5d().unpack(str[start:end])
        val1.is_static = bool(val1.is_static)
        val1.is_visible = bool(val1.is_visible)
        self.detections.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2dB().pack(_x.lapcount, _x.nrofpoints, _x.opp_is_on_trajectory))
      length = len(self.detections)
      buff.write(_struct_I.pack(length))
      for val1 in self.detections:
        _x = val1
        buff.write(_get_struct_4d2B5d().pack(_x.s, _x.d, _x.vs, _x.vd, _x.is_static, _x.is_visible, _x.time, _x.s_var, _x.d_var, _x.vs_var, _x.vd_var))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.detections is None:
        self.detections = None
      end = 0
      _x = self
      start = end
      end += 17
      (_x.lapcount, _x.nrofpoints, _x.opp_is_on_trajectory,) = _get_struct_2dB().unpack(str[start:end])
      self.opp_is_on_trajectory = bool(self.opp_is_on_trajectory)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.detections = []
      for i in range(0, length):
        val1 = f110_msgs.msg.ProjOppPoint()
        _x = val1
        start = end
        end += 74
        (_x.s, _x.d, _x.vs, _x.vd, _x.is_static, _x.is_visible, _x.time, _x.s_var, _x.d_var, _x.vs_var, _x.vd_var,) = _get_struct_4d2B5d().unpack(str[start:end])
        val1.is_static = bool(val1.is_static)
        val1.is_visible = bool(val1.is_visible)
        self.detections.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2dB = None
def _get_struct_2dB():
    global _struct_2dB
    if _struct_2dB is None:
        _struct_2dB = struct.Struct("<2dB")
    return _struct_2dB
_struct_4d2B5d = None
def _get_struct_4d2B5d():
    global _struct_4d2B5d
    if _struct_4d2B5d is None:
        _struct_4d2B5d = struct.Struct("<4d2B5d")
    return _struct_4d2B5d
