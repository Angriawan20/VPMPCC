// Generated by gencpp from file f110_msgs/ProjOppPoint.msg
// DO NOT EDIT!


#ifndef F110_MSGS_MESSAGE_PROJOPPPOINT_H
#define F110_MSGS_MESSAGE_PROJOPPPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace f110_msgs
{
template <class ContainerAllocator>
struct ProjOppPoint_
{
  typedef ProjOppPoint_<ContainerAllocator> Type;

  ProjOppPoint_()
    : s(0.0)
    , d(0.0)
    , vs(0.0)
    , vd(0.0)
    , is_static(false)
    , is_visible(false)
    , time(0.0)
    , s_var(0.0)
    , d_var(0.0)
    , vs_var(0.0)
    , vd_var(0.0)  {
    }
  ProjOppPoint_(const ContainerAllocator& _alloc)
    : s(0.0)
    , d(0.0)
    , vs(0.0)
    , vd(0.0)
    , is_static(false)
    , is_visible(false)
    , time(0.0)
    , s_var(0.0)
    , d_var(0.0)
    , vs_var(0.0)
    , vd_var(0.0)  {
  (void)_alloc;
    }



   typedef double _s_type;
  _s_type s;

   typedef double _d_type;
  _d_type d;

   typedef double _vs_type;
  _vs_type vs;

   typedef double _vd_type;
  _vd_type vd;

   typedef uint8_t _is_static_type;
  _is_static_type is_static;

   typedef uint8_t _is_visible_type;
  _is_visible_type is_visible;

   typedef double _time_type;
  _time_type time;

   typedef double _s_var_type;
  _s_var_type s_var;

   typedef double _d_var_type;
  _d_var_type d_var;

   typedef double _vs_var_type;
  _vs_var_type vs_var;

   typedef double _vd_var_type;
  _vd_var_type vd_var;





  typedef boost::shared_ptr< ::f110_msgs::ProjOppPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::f110_msgs::ProjOppPoint_<ContainerAllocator> const> ConstPtr;

}; // struct ProjOppPoint_

typedef ::f110_msgs::ProjOppPoint_<std::allocator<void> > ProjOppPoint;

typedef boost::shared_ptr< ::f110_msgs::ProjOppPoint > ProjOppPointPtr;
typedef boost::shared_ptr< ::f110_msgs::ProjOppPoint const> ProjOppPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::f110_msgs::ProjOppPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::f110_msgs::ProjOppPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::f110_msgs::ProjOppPoint_<ContainerAllocator1> & lhs, const ::f110_msgs::ProjOppPoint_<ContainerAllocator2> & rhs)
{
  return lhs.s == rhs.s &&
    lhs.d == rhs.d &&
    lhs.vs == rhs.vs &&
    lhs.vd == rhs.vd &&
    lhs.is_static == rhs.is_static &&
    lhs.is_visible == rhs.is_visible &&
    lhs.time == rhs.time &&
    lhs.s_var == rhs.s_var &&
    lhs.d_var == rhs.d_var &&
    lhs.vs_var == rhs.vs_var &&
    lhs.vd_var == rhs.vd_var;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::f110_msgs::ProjOppPoint_<ContainerAllocator1> & lhs, const ::f110_msgs::ProjOppPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace f110_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::f110_msgs::ProjOppPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::f110_msgs::ProjOppPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::f110_msgs::ProjOppPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::f110_msgs::ProjOppPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::f110_msgs::ProjOppPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::f110_msgs::ProjOppPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::f110_msgs::ProjOppPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eda6871c789332f821761fdc46c611e3";
  }

  static const char* value(const ::f110_msgs::ProjOppPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeda6871c789332f8ULL;
  static const uint64_t static_value2 = 0x21761fdc46c611e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::f110_msgs::ProjOppPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f110_msgs/ProjOppPoint";
  }

  static const char* value(const ::f110_msgs::ProjOppPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::f110_msgs::ProjOppPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Velocities are projected onto ego race line\n"
"\n"
"float64 s\n"
"float64 d                       \n"
"float64 vs\n"
"float64 vd\n"
"bool is_static\n"
"bool is_visible\n"
"float64 time\n"
"float64 s_var\n"
"float64 d_var\n"
"float64 vs_var\n"
"float64 vd_var\n"
;
  }

  static const char* value(const ::f110_msgs::ProjOppPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::f110_msgs::ProjOppPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.s);
      stream.next(m.d);
      stream.next(m.vs);
      stream.next(m.vd);
      stream.next(m.is_static);
      stream.next(m.is_visible);
      stream.next(m.time);
      stream.next(m.s_var);
      stream.next(m.d_var);
      stream.next(m.vs_var);
      stream.next(m.vd_var);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ProjOppPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::f110_msgs::ProjOppPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::f110_msgs::ProjOppPoint_<ContainerAllocator>& v)
  {
    s << indent << "s: ";
    Printer<double>::stream(s, indent + "  ", v.s);
    s << indent << "d: ";
    Printer<double>::stream(s, indent + "  ", v.d);
    s << indent << "vs: ";
    Printer<double>::stream(s, indent + "  ", v.vs);
    s << indent << "vd: ";
    Printer<double>::stream(s, indent + "  ", v.vd);
    s << indent << "is_static: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_static);
    s << indent << "is_visible: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_visible);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "s_var: ";
    Printer<double>::stream(s, indent + "  ", v.s_var);
    s << indent << "d_var: ";
    Printer<double>::stream(s, indent + "  ", v.d_var);
    s << indent << "vs_var: ";
    Printer<double>::stream(s, indent + "  ", v.vs_var);
    s << indent << "vd_var: ";
    Printer<double>::stream(s, indent + "  ", v.vd_var);
  }
};

} // namespace message_operations
} // namespace ros

#endif // F110_MSGS_MESSAGE_PROJOPPPOINT_H
