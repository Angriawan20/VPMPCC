// Generated by gencpp from file f110_msgs/LapData.msg
// DO NOT EDIT!


#ifndef F110_MSGS_MESSAGE_LAPDATA_H
#define F110_MSGS_MESSAGE_LAPDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace f110_msgs
{
template <class ContainerAllocator>
struct LapData_
{
  typedef LapData_<ContainerAllocator> Type;

  LapData_()
    : header()
    , lap_count(0)
    , lap_time(0.0)
    , average_lateral_error_to_global_waypoints(0.0)
    , max_lateral_error_to_global_waypoints(0.0)  {
    }
  LapData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , lap_count(0)
    , lap_time(0.0)
    , average_lateral_error_to_global_waypoints(0.0)
    , max_lateral_error_to_global_waypoints(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _lap_count_type;
  _lap_count_type lap_count;

   typedef double _lap_time_type;
  _lap_time_type lap_time;

   typedef double _average_lateral_error_to_global_waypoints_type;
  _average_lateral_error_to_global_waypoints_type average_lateral_error_to_global_waypoints;

   typedef double _max_lateral_error_to_global_waypoints_type;
  _max_lateral_error_to_global_waypoints_type max_lateral_error_to_global_waypoints;





  typedef boost::shared_ptr< ::f110_msgs::LapData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::f110_msgs::LapData_<ContainerAllocator> const> ConstPtr;

}; // struct LapData_

typedef ::f110_msgs::LapData_<std::allocator<void> > LapData;

typedef boost::shared_ptr< ::f110_msgs::LapData > LapDataPtr;
typedef boost::shared_ptr< ::f110_msgs::LapData const> LapDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::f110_msgs::LapData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::f110_msgs::LapData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::f110_msgs::LapData_<ContainerAllocator1> & lhs, const ::f110_msgs::LapData_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.lap_count == rhs.lap_count &&
    lhs.lap_time == rhs.lap_time &&
    lhs.average_lateral_error_to_global_waypoints == rhs.average_lateral_error_to_global_waypoints &&
    lhs.max_lateral_error_to_global_waypoints == rhs.max_lateral_error_to_global_waypoints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::f110_msgs::LapData_<ContainerAllocator1> & lhs, const ::f110_msgs::LapData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace f110_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::f110_msgs::LapData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::f110_msgs::LapData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::f110_msgs::LapData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::f110_msgs::LapData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::f110_msgs::LapData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::f110_msgs::LapData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::f110_msgs::LapData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5725d7beb0cea6dca3c2632d8748505b";
  }

  static const char* value(const ::f110_msgs::LapData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5725d7beb0cea6dcULL;
  static const uint64_t static_value2 = 0xa3c2632d8748505bULL;
};

template<class ContainerAllocator>
struct DataType< ::f110_msgs::LapData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f110_msgs/LapData";
  }

  static const char* value(const ::f110_msgs::LapData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::f110_msgs::LapData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"int32 lap_count \n"
"float64 lap_time\n"
"float64 average_lateral_error_to_global_waypoints\n"
"float64 max_lateral_error_to_global_waypoints\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::f110_msgs::LapData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::f110_msgs::LapData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.lap_count);
      stream.next(m.lap_time);
      stream.next(m.average_lateral_error_to_global_waypoints);
      stream.next(m.max_lateral_error_to_global_waypoints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LapData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::f110_msgs::LapData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::f110_msgs::LapData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "lap_count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lap_count);
    s << indent << "lap_time: ";
    Printer<double>::stream(s, indent + "  ", v.lap_time);
    s << indent << "average_lateral_error_to_global_waypoints: ";
    Printer<double>::stream(s, indent + "  ", v.average_lateral_error_to_global_waypoints);
    s << indent << "max_lateral_error_to_global_waypoints: ";
    Printer<double>::stream(s, indent + "  ", v.max_lateral_error_to_global_waypoints);
  }
};

} // namespace message_operations
} // namespace ros

#endif // F110_MSGS_MESSAGE_LAPDATA_H
